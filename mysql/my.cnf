# Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#
# The MySQL  Server configuration file.
#
# For explanations see
# https://blog.wu06.com/2019/05/27/linux%E4%B8%8Bmysql%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6my.cnf%E8%AF%A6%E8%A7%A3/

# 服务器端配置
[mysqld]

# lower_case_table_names=1, 表名存储在磁盘是小写的，但是比较的时候是不区分大小写
# lower_case_table_names=0, 表名存储为给定的大小和比较是区分大小写的 
# lower_case_table_names=2, 表名存储为给定的大小写但是比较的时候是小写的
lower_case_table_names = 1

# 跳过权限验证，用于修改密码
#skip-grant-tables

# 监听端口
port = 3306

# 数据目录
datadir = /var/lib/mysql

# socket通信设置
socket = /var/run/mysqld/mysqld.sock

# pid文件路径
pid-file = /var/run/mysqld/mysqld.pid

# 数据库默认字符集配置
# utf8mb4编码是utf8编码的超集，兼容utf8，并且能存储4字节的表情字符
character-set-server = utf8mb4
collation-server = utf8mb4_unicode_ci

innodb_large_prefix = on

explicit_defaults_for_timestamp = true

default-time_zone = '+8:00'

# 默认的数据库引擎
default-storage-engine = InnoDB

# 建议禁用符号链接，以防止各种安全风险；为此，取消这一行的注释
symbolic-links = 0

# sql模式设置
sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES

# 不使用高速缓存区来存放主机名和IP地址的对应关系。
skip-host-cache

# 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项， 则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求
skip-name-resolve

# 全局动态变量，默认3，范围：1～3
# 表示错误日志记录的信息，1：只记录error信息；2：记录error和warnings信息；3：记录error、warnings和普通的notes信息。
#log_error_verbosity = 3

# 错误日志路径
log_error	= /var/lib/log/mysql-error.log

# 指定是否开启慢查询日志. 慢查询是指消耗了比 “long_query_time” 定义的更多时间的查询.如果 log_long_format 被打开,那些没有使用索引的查询也会被记录.如果你经常增加新查询到已有的系统内的话. 一般来说这是一个好主意。
slow_query_log = 1

# 参数 log_output 指定了慢查询输出的格式，默认为 FILE，你可以将它设为 TABLE，然后就可以查询 mysql 架构下的 slow_log 表了
log_output = FILE

# 设定慢查询的阀值，超出次设定值的SQL即被记录到慢查询日志，缺省值为10s.所有的使用了比这个时间(以秒为单位)更多的查询会被认为是慢速查询.不要在这里使用”1″, 否则会导致所有的查询,甚至非常快的查询页被记录下来(目前MySQL时间的精确度能达到毫秒级别)。
long_query_time =  0.1

# 是否记录未使用索引的SQL，记录到慢查询日志中
log_queries_not_using_indexes = 1

# 在慢速日志中记录更多的信息.一般此项最好打开，打开此项会记录使得那些没有使用索引的查询也被作为到慢速查询附加到慢速日志里
# 打开了docker容器启动不了
###log_long_format

# 指定慢日志文件存放位置，可以为空，系统会给一个缺省的文件host_name_slow.log
slow_query_log_file = /var/lib/log/mysql_slow_query.log

# 将所有到达MySQL Server的SQL语句记录下来,默认关闭 
general_log = 1

# general_log路径
general_log_file =  /var/lib/log/mysql_general.log

# 查询缓存碎片率 = Qcache_free_blocks / Qcache_total_blocks * 100%
# 如果查询缓存碎片率超过 20%，可以用 FLUSH QUERY CACHE 整理缓存碎片，或者试试减小query_cache_min_res_unit，如果你的查询都是小数据量的话。
# 查询缓存利用率 = (query_cache_size – Qcache_free_memory) / query_cache_size *100%
# 查询缓存利用率在 25%以下的话说明 query_cache_size 设置的过大，可适当减小;查询缓存利用率在 80%以上而且 Qcache_lowmem_prunes > 50 的话说明 query_cache_size 可能有点小，要不就是碎片太多。
# 查询缓存命中率 = (Qcache_hits – Qcache_inserts) / Qcache_hits * 100%

# 可以通过在 MySQL 控制台执行以下命令观察：
# 代码:
# > SHOW VARIABLES LIKE '%query_cache%';
# > SHOW STATUS LIKE 'Qcache%';如果 Qcache_lowmem_prunes 的值非常大，则表明经常出现缓冲不够的情况；
# 如果 Qcache_hits 的值非常大，则表明查询缓冲使用非常频繁，如果该值较小反而会影响效率，那么可以考虑不用查询缓冲；
# Qcache_free_blocks，如果该值非常大，则表明缓冲区中碎片很多。
# memlock # 如果你的系统支持 memlock() 函数,你也许希望打开此选项用以让运行中的 mysql 在在内存高度
# 紧张的时候,数据在内存中保持锁定并且防止可能被 swapping out,此选项对于性能有益
# https://blog.csdn.net/yabingshi_tech/article/details/49494487
# 清理缓存
# FLUSH QUERY CACHE; 清理查询缓存内存碎片
# RESET QUERY CACHE; 从查询缓存中移除所有查询
# FLUSH TABLES; 关闭所有打开的表，同时会清空所有查询缓存中的内容


# 查询缓存区的工作模式:0, 禁用查询缓存区; 1，启用查询缓存区(默认设置); 2，”按需分配”模式，只响应SELECT SQL_CACHE命令。
# 为1时，不使用缓存，SELECT SQL_NO_CACHE * FROM table;
# 为2时，使用缓存，SELECT SQL_CACHE * FROM table;
query_cache_type = 1

# 查询缓存分配的最小块大小.默认是 4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费
query_cache_min_res_unit = 1K

# 指定单个查询能够使用的缓冲区大小，默认1M。
query_cache_limit = 2M

# MySQL的查询缓冲大小(默认设置是0，不开辟查询缓存区)。
query_cache_size = 64M

# 指定用于索引的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，
# 系统将开始换页并且真的变慢了。对于内存在4GB左右的服务器该参数可设置为384M或512M。通过检查状态值Key_read_requests和Key_reads，
# 可以知道key_buffer_size设置是否合理。比例key_reads/key_read_requests应该尽可能的低，
# 至少是1:100，1:1000更好(上述状态值可以使用SHOW STATUS LIKE ‘key_read%’获得)。注意：该参数值设置的过大反而会是服务器整体效率降低
key_buffer_size = 4M

# MyISAM 引擎表全文索引包含的最小词长度
# 被全文检索索引的最小的字长。
# 你也许希望减少它，如果你需要搜索更短字的时候。
# 注意在你修改此值之后，你需要重建你的 FULLTEXT 索引
# 分词词汇最小长度，默认4
#ft_min_word_len = 1

# 中文分词最小长度，默认为2
#ngram_token_size = 1

# 命令行配置
[mysql]

default-character-set = utf8mb4

# auto-rehash
# 开启数据库tab补全

no-auto-rehash
# 关闭数据库tab补全

# 登录数据库后显示当前位置
prompt = "Welcome to Docker-MySQL [\d]> "

[mysqldump]

default-character-set = utf8mb4

# 开启快速导出，支持较大数据库的转储，在导出非常巨大的表时需要此项。增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或mysqld必须返回大的结果行时mysqld才会分配更多内存。该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。 如果你正是用大的BLOB值，而且未为mysqld授予为处理查询而访问足够内存的权限，也会遇到与大信息包有关的奇怪问题。如果怀疑出现了该情况，请尝试在mysqld_safe脚本开始增加ulimit -d 256000，并重启mysqld。
quick

# Quote identifiers within backtick characters
quote-names

# 服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小(当与大的BLOB 字段一起工作时相当必要)， 每个连接独立的大小.大小动态增加。 设置最大包,限制server接受的数据包大小，避免超长SQL的执行有问题 默认值为16M，当MySQL客户端或mysqld服务器收到大于 max_allowed_packet 字节的信息包时，将发出“信息包过大”错误，并关闭连接。对于某些客户端，如果通信信息包过大，在执行查询期间，可能会遇到“丢失与 MySQL 服务器的连接”错误。默认值 16M。
max_allowed_packet	= 16M
